diff --git a/node_modules/msw-snapshot/dist/cjs/index.js b/node_modules/msw-snapshot/dist/cjs/index.js
index b8ffec4..e7ce6c0 100644
--- a/node_modules/msw-snapshot/dist/cjs/index.js
+++ b/node_modules/msw-snapshot/dist/cjs/index.js
@@ -108,9 +108,15 @@ var snapshot = function (config) {
                     if (!config.ignoreSnapshots && (0, node_fs_1.existsSync)(snapshotPath)) {
                         try {
                             snapshot_1 = JSON.parse((0, node_fs_1.readFileSync)(snapshotPath).toString('utf8'));
+                            // Filter out compression-related headers since we're manually handling the body
+                            const filteredHeaders = snapshot_1.response.headers.filter(
+                                ([key, _]) =>
+                                !key.toLowerCase().includes('content-encoding') &&
+                                !key.toLowerCase().includes('transfer-encoding')
+                            );
                             (_k = config.onFetchFromSnapshot) === null || _k === void 0 ? void 0 : _k.call(config, clonedInfo(), snapshot_1);
-                            return [2 /*return*/, new Response(new TextEncoder().encode(snapshot_1.response.body), {
-                                    headers: new Headers(snapshot_1.response.headers),
+                            return [2 /*return*/, new Response(snapshot_1.response.body, {
+                                    headers: new Headers(filteredHeaders),
                                     status: snapshot_1.response.status,
                                     statusText: snapshot_1.response.statusText,
                                 })];
@@ -155,8 +161,14 @@ var snapshot = function (config) {
                         (0, node_fs_1.writeFileSync)(snapshotPath, JSON.stringify(snapshot, undefined, 2));
                         (_m = config.onSnapshotUpdated) === null || _m === void 0 ? void 0 : _m.call(config, clonedInfo(), snapshot);
                     }
-                    return [2 /*return*/, new Response(new TextEncoder().encode(snapshot.response.body), {
-                            headers: new Headers(snapshot.response.headers),
+                    // Filter out compression-related headers since we're manually handling the body
+                    const filteredHeaders = snapshot.response.headers.filter(
+                        ([key, _]) =>
+                        !key.toLowerCase().includes('content-encoding') &&
+                        !key.toLowerCase().includes('transfer-encoding')
+                    )
+                    return [2 /*return*/, new Response(snapshot.response.body, {
+                            headers: new Headers(filteredHeaders),
                             status: snapshot.response.status,
                             statusText: snapshot.response.statusText,
                         })];
